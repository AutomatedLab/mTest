trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - CHANGELOG.md
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  testResultFolderName: testResults
  defaultBranch: main
  Agent.Source.Git.ShallowFetchDepth: 0
  EnvironmentToBuild: dev #TODO: Remove this and get environments from Azure.yml.
  tags: '{"Description":"M365 DSC Infrastructure"}'
  m365StorageContainerName: modules
  m365ServiceConnectionName: M365

stages:

- stage: Build
  jobs:
  - job: CompileDsc
    displayName: 'Compile DSC Configuration'
    pool:
      vmImage: 'windows-latest'
    steps:

    - pwsh: |
        Install-Module -Name powershell-yaml -Force
        $environmentToBuild = $env:EnvironmentToBuild
        $azureData = Get-Content .\source\Global\Azure.yml -Raw | ConvertFrom-Yaml
        $azSubscriptionId = $azureData."$environmentToBuild".AzSubscriptionId
        Write-Host "azSubscriptionId: $azSubscriptionId"

        $azLocation = $azureData."$environmentToBuild".AzLocation
        Write-Host "azLocation: $azLocation"

        $dscKeyVaultReaderAppId = $azureData."$environmentToBuild".AzKeyVaultServicePrincipalApplicationId
        Write-Host "dscKeyVaultReaderAppId: $dscKeyVaultReaderAppId"

        Write-Host "##vso[task.setvariable variable=azSubscriptionId;isOutput=true]$azSubscriptionId"
        Write-Host "##vso[task.setvariable variable=azLocation;isOutput=true]$azLocation"
        Write-Host "##vso[task.setvariable variable=dscKeyVaultReaderAppId;isOutput=true]$dscKeyVaultReaderAppId"
      name: SetAzureInfo
      displayName: 'Get Azure Info from Yaml files and write to Environment Variables'

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
      displayName: 'Display Environment Variables'

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: "RessourceGroup - Deployment"
      inputs:
        deploymentScope: 'Subscription'
        azureResourceManagerConnection: '$(m365ServiceConnectionName)'
        subscriptionId: '$(SetAzureInfo.azSubscriptionId)'
        location: '$(SetAzureInfo.azLocation)'
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/assets/Arm Templates/resourceGroup.json'
        overrideParameters: '-Environment "$(EnvironmentToBuild)" -Tags $(tags) -ProjectName "$(SYSTEM.TEAMPROJECT)"'
        deploymentMode: 'Incremental'
        deploymentName: 'ResourceGroup'
        deploymentOutputs: 'resourceGroupOutput'

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
        Write-Host ------------------------------------------------
        Write-Host "resourceGroupOutput.resourceGroupName.Value = '$(resourceGroupOutput.resourceGroupName.Value)'"

        $value = '$(resourceGroupOutput.resourceGroupName.Value)'
        $value = $value.Trim() -replace '"', ''

        Write-Host "resourceGroupOutput.resourceGroupName.Value = '$value'"
        Write-Host "##vso[task.setvariable variable=resourceGroupName;isOutput=true]$value"
      name: SetResourceGroupName
      displayName: 'Set Resource Group Name'

    - pwsh: |
        Write-Host "azSubscriptionId = '$(SetAzureInfo.azSubscriptionId)'"
        Write-Host "location: '$(SetAzureInfo.azLocation)'"
        Write-Host "location: '$($env:SetAzureInfo_azLocation)'"
        Write-Host "dscKeyVaultReaderAppId: '$(SetAzureInfo.dscKeyVaultReaderAppId)'"
      displayName: 'Display deploymentOutput'

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Infrastructure - Deployment'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: '$(m365ServiceConnectionName)'
        subscriptionId: '$(SetAzureInfo.azSubscriptionId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(SetResourceGroupName.resourceGroupName)'
        location: '$(SetAzureInfo.azLocation)'
        templateLocation: 'Linked artifact'
        csmFile: '$(Build.SourcesDirectory)/assets/Arm Templates/infrastructure.json'
        overrideParameters: '-Environment "$(EnvironmentToBuild)" -ProjectName $(SYSTEM.TEAMPROJECT) -DscKeyVaultReaderAppId "$(SetAzureInfo.dscKeyVaultReaderAppId)"'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'deploymentOutput'

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
        Write-Host ------------------------------------------------

        Write-Host "deploymentOutput.automationAccountName.Value = '$(deploymentOutput.automationAccountName.Value)'"
        Write-Host "##vso[task.setvariable variable=automationAccountName;isOutput=true]$(deploymentOutput.automationAccountName.Value)"

        Write-Host "deploymentOutput.keyVaultName.Value = '$(deploymentOutput.keyVaultName.Value)'"
        Write-Host "##vso[task.setvariable variable=keyVaultName;isOutput=true]$(deploymentOutput.keyVaultName.Value)"

        Write-Host "deploymentOutput.storageAccountName.Value = '$(deploymentOutput.storageAccountName.Value)'"
        Write-Host "##vso[task.setvariable variable=storageAccountName;isOutput=true]$(deploymentOutput.storageAccountName.Value)"
      name: SetInfrastructureDeploymentNames
      displayName: 'Set Infrastructure Deployment Names'

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
      displayName: 'Display deploymentOutput'

#-----------------------------------------------------------------------------------------------------------------------------

    - pwsh: |
        dotnet tool install --global GitVersion.Tool
        $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
        $gitVersionObject.PSObject.Properties.ForEach{
            Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
            Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
        }
        Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
      displayName: Calculate ModuleVersion (GitVersion)

    - task: PowerShell@2
      name: build
      displayName: 'Build DSC Artifacts'
      inputs:
        filePath: './build.ps1'
        arguments: '-ResolveDependency -tasks build'
        pwsh: false
      env:
        ModuleVersion: $(NuGetVersionV2)

    - task: PowerShell@2
      name: pack
      displayName: 'Pack DSC Artifacts'
      inputs:
        filePath: './build.ps1'
        arguments: '-ResolveDependency -tasks pack'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Output Folder'
      inputs:
        targetPath: '$(buildFolderName)/'
        artifact: 'output'
        publishLocation: 'pipeline'
        parallel: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish MOF Files'
      inputs:
        targetPath: '$(buildFolderName)/MOF'
        artifact: 'MOF'
        publishLocation: 'pipeline'
        parallel: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Meta MOF Files'
      inputs:
        targetPath: '$(buildFolderName)/MetaMOF'
        artifact: 'MetaMOF'
        publishLocation: 'pipeline'
        parallel: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Compressed Modules'
      inputs:
        targetPath: '$(buildFolderName)/CompressedModules'
        artifact: 'CompressedModules'
        publishLocation: 'pipeline'
        parallel: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish RSOP Files'
      inputs:
        targetPath: '$(buildFolderName)/RSOP'
        artifact: 'RSOP'
        publishLocation: 'pipeline'
        parallel: true

#-----------------------------------------------------------------------------------------------------------------------------

- stage: DscDeployModules
  dependsOn: Build
  condition: succeeded()
  jobs:

  - job: PublishModules
    displayName: Publish DSC resource modules
    pool:
      vmImage: 'windows-latest'
    variables:
      m365Location: $[ stageDependencies.Build.CompileDsc.outputs['SetAzureInfo.azLocation'] ]
      m365StorageAccountName: $[ stageDependencies.Build.CompileDsc.outputs['SetInfrastructureDeploymentNames.storageAccountName'] ]
      m365AutomationAccountName: $[ stageDependencies.Build.CompileDsc.outputs['SetInfrastructureDeploymentNames.automationAccountName'] ]
      m365ResourceGroupName: $[ stageDependencies.Build.CompileDsc.outputs['SetResourceGroupName.resourceGroupName'] ]
    steps:

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Build Artifact: CompressedModules'
      inputs:
        source: 'current'
        artifact: CompressedModules
        path: '$(Build.SourcesDirectory)/CompressedModules'

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
      displayName: 'Display Environment Variables'

    - pwsh: |
        $envVariables = [System.Environment]::GetEnvironmentVariables()

        $envVariables.GetEnumerator() | Where-Object { $_.Key -like 'm365*' } | ForEach-Object {
            Write-Host "##vso[task.setvariable variable=$($_.Key);]$($_.Value.Trim())"
        }
      displayName: Trim values of all 'm365*' environment variables

    - pwsh: |
        dir -Path env: | Format-Table -Property Name, Value -AutoSize | Out-String | Write-Host
      displayName: 'Display Environment Variables'

    - task: AzurePowerShell@5
      name: deployModulesToAzAutomation
      displayName: Deploy modules to Azure Automation
      inputs:
        azureSubscription: $(m365ServiceConnectionName)
        scriptType: 'inlineScript'
        inline: |
          $account = Get-AzStorageAccount -Name $env:m365StorageAccountName -ResourceGroupName $env:m365ResourceGroupName -ErrorAction SilentlyContinue
          if (-not $account)
          {
              Write-Error -Message "There is no storage account called $env:m365StorageAccountName ..."
              return
          }
          $container = Get-AzStorageContainer -Name $env:m365StorageContainerName -Context $account.Context -ErrorAction SilentlyContinue
          if (-not $container)
          {
              $container = New-AzStorageContainer -Name $env:m365StorageContainerName -Context $account.Context -ErrorAction Stop
          }
          $modulePath = Join-Path -Path $env:BUILD_SOURCESDIRECTORY -ChildPath CompressedModules
          foreach ($module in (Get-ChildItem $modulePath -Filter *.zip))
          {
              $moduleName = $module.BaseName -replace '_\d+\.\d+\.\d+(\.\d+)?'
              $content = Set-AzStorageBlobContent -File $module.FullName -CloudBlobContainer $container.CloudBlobContainer -Blob $module.Name -Context $account.Context -Force -ErrorAction Stop
              $token = New-AzStorageBlobSASToken -CloudBlob $content.ICloudBlob -StartTime (Get-Date) -ExpiryTime (Get-Date).AddYears(5) -Protocol HttpsOnly -Context $account.Context -Permission r -ErrorAction Stop
              $uri = 'https://{0}.blob.core.windows.net/{1}/{2}{3}' -f $env:m365StorageAccountName, $env:m365StorageContainerName, $module.Name, $token
              New-AzAutomationModule -Name $moduleName -ContentLinkUri $uri -ResourceGroupName $env:m365ResourceGroupName -AutomationAccountName $env:m365AutomationAccountName
          }
        errorActionPreference: 'stop'
        failOnStandardError: false
        azurePowerShellVersion: 'latestVersion'
        pwsh: false

#-----------------------------------------------------------------------------------------------------------------------------

- stage: DscDeploymentDev
  displayName: Publish MOFs to Azure Automation Account
  condition: succeeded()
  dependsOn:
    - Build
    - DscDeployModules
  pool:
    vmImage: 'windows-latest'
  variables:
    m365Location: $[ stageDependencies.Build.CompileDsc.outputs['SetAzureInfo.azLocation'] ]
    m365StorageAccountName: $[ stageDependencies.Build.CompileDsc.outputs['SetInfrastructureDeploymentNames.storageAccountName'] ]
    m365AutomationAccountName: $[ stageDependencies.Build.CompileDsc.outputs['SetInfrastructureDeploymentNames.automationAccountName'] ]
    m365ResourceGroupName: $[ stageDependencies.Build.CompileDsc.outputs['SetResourceGroupName.resourceGroupName'] ]

  jobs:
    - deployment: Dev
      #TODO: Deployment per envrironment defined in Azure.yml
      displayName: Dev Deployment
      environment: Dev
      pool:
        vmImage: 'windows-latest'
      workspace:
        clean: all
      strategy:
        runOnce:
          deploy:
            steps:
            - download: None

            - pwsh: |
                $envVariables = [System.Environment]::GetEnvironmentVariables()

                $envVariables.GetEnumerator() | Where-Object { $_.Key -like 'm365*' } | ForEach-Object {
                    Write-Host "##vso[task.setvariable variable=$($_.Key);]$($_.Value.Trim())"
                }
              displayName: Trim values of all 'm365*' environment variables

            - task: DownloadPipelineArtifact@2
              displayName: 'Download Build Artifact: MOF'
              inputs:
                source: 'current'
                artifact: MOF
                path: '$(Build.SourcesDirectory)/MOF'

            - task: PowerShell@2
              name: DisplayEnvironmentVariables
              displayName: 'Display Environment Variables'
              inputs:
                targetType: 'inline'
                script: |
                  dir -Path env: | Out-String | Write-Host

            - task: AzurePowerShell@5
              name: DeployMofToAzAutomation
              displayName: Deploy to Azure Automation Pull
              inputs:
                azureSubscription: $(m365ServiceConnectionName)
                scriptType: 'inlineScript'
                inline: |
                  $mofPath = Join-Path -Path $env:BUILD_SOURCESDIRECTORY -ChildPath "/MOF/$env:ENVIRONMENT_NAME"
                  foreach ($mof in (Get-ChildItem -Path $mofPath -Filter *.mof))
                  {
                      $param = @{
                        Path                            = $mof.FullName
                        ConfigurationName               = $env:ENVIRONMENT_NAME
                        AutomationAccountName           = $env:m365AutomationAccountName
                        ResourceGroupName               = $env:m365ResourceGroupName
                        Force                           = $true
                        IncrementNodeConfigurationBuild = $true
                    }
                    Import-AzAutomationDscNodeConfiguration @param
                  }
                errorActionPreference: 'stop'
                failOnStandardError: false
                azurePowerShellVersion: 'latestVersion'
                pwsh: false
